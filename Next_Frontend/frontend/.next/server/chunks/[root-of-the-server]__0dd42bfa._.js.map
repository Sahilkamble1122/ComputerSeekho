{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 66, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/sahil/OneDrive/Pictures/Documents/GitHub/ComputerSeekho_Frontend/Frontend/Next.Js_repo/computer_sekho/app/api/albums/%5Bid%5D/route.js"],"sourcesContent":["import { NextResponse } from 'next/server';\r\n\r\nexport async function GET(request, { params }) {\r\n  try {\r\n    const { id } = params;\r\n    const { searchParams } = new URL(request.url);\r\n    const page = searchParams.get('page') || '1';\r\n    const limit = searchParams.get('limit') || '16';\r\n\r\n    // Fetch album details from Spring Boot backend\r\n    const albumResponse = await fetch(`http://localhost:8080/api/albums/${id}`);\r\n    \r\n    if (!albumResponse.ok) {\r\n      throw new Error(`Album not found: ${albumResponse.status}`);\r\n    }\r\n\r\n    const album = await albumResponse.json();\r\n\r\n    // Fetch all images for this album\r\n    const imagesResponse = await fetch('http://localhost:8080/api/images');\r\n    \r\n    if (!imagesResponse.ok) {\r\n      throw new Error(`Images backend error: ${imagesResponse.status}`);\r\n    }\r\n\r\n    const allImages = await imagesResponse.json();\r\n    \r\n    // Filter images by album ID and convert to the format expected by ImageGallery\r\n    const albumImages = allImages\r\n      .filter(img => img.albumId === parseInt(id))\r\n      .map(img => ({\r\n        id: img.imageId,\r\n        url: `/images/${img.imagePath.split('/').pop()}`,\r\n        caption: img.imageCaption || null,\r\n        isCover: img.isAlbumCover,\r\n        createdAt: img.createdDate\r\n      }))\r\n      .sort((a, b) => {\r\n        // Put cover image first, then sort by creation date\r\n        if (a.isCover && !b.isCover) return -1;\r\n        if (!a.isCover && b.isCover) return 1;\r\n        return new Date(b.createdAt) - new Date(a.createdAt);\r\n      });\r\n\r\n    // Apply pagination\r\n    const startIndex = (parseInt(page) - 1) * parseInt(limit);\r\n    const endIndex = startIndex + parseInt(limit);\r\n    const paginatedImages = albumImages.slice(startIndex, endIndex);\r\n\r\n    return NextResponse.json({\r\n      albumTitle: album.albumName,\r\n      albumDescription: album.albumDescription,\r\n      totalImages: albumImages.length,\r\n      images: paginatedImages,\r\n      hasMore: endIndex < albumImages.length,\r\n      currentPage: parseInt(page),\r\n      totalPages: Math.ceil(albumImages.length / parseInt(limit))\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error in GET /api/albums/[id]:', error);\r\n    return NextResponse.json(\r\n      { \r\n        error: 'Failed to fetch album images',\r\n        details: error.message\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;;AAEO,eAAe,IAAI,OAAO,EAAE,EAAE,MAAM,EAAE;IAC3C,IAAI;QACF,MAAM,EAAE,EAAE,EAAE,GAAG;QACf,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,OAAO,aAAa,GAAG,CAAC,WAAW;QACzC,MAAM,QAAQ,aAAa,GAAG,CAAC,YAAY;QAE3C,+CAA+C;QAC/C,MAAM,gBAAgB,MAAM,MAAM,CAAC,iCAAiC,EAAE,IAAI;QAE1E,IAAI,CAAC,cAAc,EAAE,EAAE;YACrB,MAAM,IAAI,MAAM,CAAC,iBAAiB,EAAE,cAAc,MAAM,EAAE;QAC5D;QAEA,MAAM,QAAQ,MAAM,cAAc,IAAI;QAEtC,kCAAkC;QAClC,MAAM,iBAAiB,MAAM,MAAM;QAEnC,IAAI,CAAC,eAAe,EAAE,EAAE;YACtB,MAAM,IAAI,MAAM,CAAC,sBAAsB,EAAE,eAAe,MAAM,EAAE;QAClE;QAEA,MAAM,YAAY,MAAM,eAAe,IAAI;QAE3C,+EAA+E;QAC/E,MAAM,cAAc,UACjB,MAAM,CAAC,CAAA,MAAO,IAAI,OAAO,KAAK,SAAS,KACvC,GAAG,CAAC,CAAA,MAAO,CAAC;gBACX,IAAI,IAAI,OAAO;gBACf,KAAK,CAAC,QAAQ,EAAE,IAAI,SAAS,CAAC,KAAK,CAAC,KAAK,GAAG,IAAI;gBAChD,SAAS,IAAI,YAAY,IAAI;gBAC7B,SAAS,IAAI,YAAY;gBACzB,WAAW,IAAI,WAAW;YAC5B,CAAC,GACA,IAAI,CAAC,CAAC,GAAG;YACR,oDAAoD;YACpD,IAAI,EAAE,OAAO,IAAI,CAAC,EAAE,OAAO,EAAE,OAAO,CAAC;YACrC,IAAI,CAAC,EAAE,OAAO,IAAI,EAAE,OAAO,EAAE,OAAO;YACpC,OAAO,IAAI,KAAK,EAAE,SAAS,IAAI,IAAI,KAAK,EAAE,SAAS;QACrD;QAEF,mBAAmB;QACnB,MAAM,aAAa,CAAC,SAAS,QAAQ,CAAC,IAAI,SAAS;QACnD,MAAM,WAAW,aAAa,SAAS;QACvC,MAAM,kBAAkB,YAAY,KAAK,CAAC,YAAY;QAEtD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,YAAY,MAAM,SAAS;YAC3B,kBAAkB,MAAM,gBAAgB;YACxC,aAAa,YAAY,MAAM;YAC/B,QAAQ;YACR,SAAS,WAAW,YAAY,MAAM;YACtC,aAAa,SAAS;YACtB,YAAY,KAAK,IAAI,CAAC,YAAY,MAAM,GAAG,SAAS;QACtD;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,kCAAkC;QAChD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,OAAO;YACP,SAAS,MAAM,OAAO;QACxB,GACA;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}