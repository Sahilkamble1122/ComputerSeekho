{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 58, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/sahil/OneDrive/Pictures/Documents/GitHub/ComputerSeekho_Frontend/Frontend/Next.Js_repo/computer_sekho/lib/config.js"],"sourcesContent":["// API Configuration\r\nexport const API_CONFIG = {\r\n  // Replace with your Spring Boot backend URL\r\n  BASE_URL: process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8080',\r\n  \r\n  // API Endpoints\r\n  ENDPOINTS: {\r\n    STUDENTS: '/api/students',\r\n    PAYMENT_HISTORY: '/api/receipts',\r\n    PAYMENT_TYPES: '/api/payment-types',\r\n    PROCESS_PAYMENT: '/api/payment-with-type',\r\n    PLACEMENTS: '/api/placements',\r\n    BATCHES: '/api/batches',\r\n    COURSES: '/api/courses',\r\n  }\r\n};\r\n\r\n// Helper function to get full API URL\r\nexport const getApiUrl = (endpoint) => {\r\n  return `${API_CONFIG.BASE_URL}${endpoint}`;\r\n};\r\n"],"names":[],"mappings":"AAAA,oBAAoB;;;;;AACb,MAAM,aAAa;IACxB,4CAA4C;IAC5C,UAAU,QAAQ,GAAG,CAAC,mBAAmB,IAAI;IAE7C,gBAAgB;IAChB,WAAW;QACT,UAAU;QACV,iBAAiB;QACjB,eAAe;QACf,iBAAiB;QACjB,YAAY;QACZ,SAAS;QACT,SAAS;IACX;AACF;AAGO,MAAM,YAAY,CAAC;IACxB,OAAO,GAAG,WAAW,QAAQ,GAAG,UAAU;AAC5C","debugId":null}},
    {"offset": {"line": 84, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/sahil/OneDrive/Pictures/Documents/GitHub/ComputerSeekho_Frontend/Frontend/Next.Js_repo/computer_sekho/app/api/placements/route.js"],"sourcesContent":["import { API_CONFIG, getApiUrl } from \"@/lib/config\";\r\n\r\n// Helper function to get real student counts for batches\r\nasync function getStudentCounts(batchIds) {\r\n  try {\r\n    const studentCounts = {};\r\n    \r\n    // Fetch all students at once (more efficient)\r\n    const studentsResponse = await fetch(getApiUrl(API_CONFIG.ENDPOINTS.STUDENTS));\r\n    \r\n    if (studentsResponse.ok) {\r\n      const allStudents = await studentsResponse.json();\r\n      \r\n      // Calculate counts for each batch\r\n      batchIds.forEach(batchId => {\r\n        const batchStudents = allStudents.filter(student => student.batchId === batchId);\r\n        const totalStudents = batchStudents.length;\r\n        const placedStudents = batchStudents.filter(student => student.isPlaced === true).length;\r\n        \r\n        studentCounts[batchId] = {\r\n          totalStudents,\r\n          placedStudents\r\n        };\r\n      });\r\n    } else {\r\n      // Fallback if API fails\r\n      batchIds.forEach(batchId => {\r\n        studentCounts[batchId] = {\r\n          totalStudents: 0,\r\n          placedStudents: 0\r\n        };\r\n      });\r\n    }\r\n    \r\n    return studentCounts;\r\n  } catch (error) {\r\n    console.error(\"Error fetching student counts:\", error);\r\n    \r\n    // Fallback if error occurs\r\n    const studentCounts = {};\r\n    batchIds.forEach(batchId => {\r\n      studentCounts[batchId] = {\r\n        totalStudents: 0,\r\n        placedStudents: 0\r\n      };\r\n    });\r\n    return studentCounts;\r\n  }\r\n}\r\n\r\nexport async function GET() {\r\n  try {\r\n    // Fetch batches from Spring Boot backend\r\n    const batchesResponse = await fetch(getApiUrl(API_CONFIG.ENDPOINTS.BATCHES));\r\n    \r\n    if (!batchesResponse.ok) {\r\n      throw new Error(`Failed to fetch batches: ${batchesResponse.status}`);\r\n    }\r\n    \r\n    const batches = await batchesResponse.json();\r\n    \r\n    // Course ID to name mapping based on your data\r\n    const courseMapping = {\r\n      101: \"PG DBDA\", // Data Science related courses\r\n      98: \"PG DAC\",   // Computer Applications\r\n      103: \"PRE - CAT\" // Special course\r\n    };\r\n    \r\n    // Get real student counts for all batches\r\n    const batchIds = batches.map(batch => batch.batchId);\r\n    const studentCounts = await getStudentCounts(batchIds);\r\n    \r\n    // Format the batches data for the frontend\r\n    const formattedBatches = batches\r\n      .filter(batch => batch.batchIsActive) // Only show active batches\r\n      .map(batch => {\r\n        const courseName = courseMapping[batch.courseId] || `Course ${batch.courseId}`;\r\n        const studentData = studentCounts[batch.batchId] || { totalStudents: 0, placedStudents: 0 };\r\n        \r\n        return {\r\n          course: courseName,\r\n          batch: batch.batchName,\r\n          slug: `${courseName.toLowerCase().replace(/\\s+/g, '-')}-${batch.batchName.toLowerCase().replace(/\\s+/g, '-')}`,\r\n          logo: batch.batchLogo || \"/batches/default-batch-logo.png\",\r\n          totalStudents: studentData.totalStudents,\r\n          placedStudents: studentData.placedStudents,\r\n          courseId: batch.courseId,\r\n          batchId: batch.batchId,\r\n          presentationDate: batch.presentationDate,\r\n          courseFees: batch.courseFees\r\n        };\r\n      })\r\n      .sort((a, b) => new Date(b.presentationDate) - new Date(a.presentationDate)); // Sort by presentation date\r\n    \r\n    return Response.json(formattedBatches);\r\n    \r\n  } catch (error) {\r\n    console.error(\"Error fetching placement data:\", error);\r\n    \r\n    // Fallback to static data if backend is not available\r\n    return Response.json([\r\n      {\r\n        course: \"PG DBDA\",\r\n        batch: \"Aug 2024\",\r\n        slug: \"pg-dbda-aug-2024\",\r\n        logo: \"/batches/default-batch-logo.png\",\r\n        totalStudents: 40,\r\n        placedStudents: 36,\r\n      },\r\n      {\r\n        course: \"PG DBDA\",\r\n        batch: \"Jan 2024\",\r\n        slug: \"pg-dbda-jan-2024\",\r\n        logo: \"/batches/default-batch-logo.png\",\r\n        totalStudents: 50,\r\n        placedStudents: 45,\r\n      },\r\n      {\r\n        course: \"PG DAC\",\r\n        batch: \"Feb 2023\",\r\n        slug: \"pg-dac-feb-2023\",\r\n        logo: \"/batches/default-batch-logo.png\",\r\n        totalStudents: 60,\r\n        placedStudents: 51,\r\n      },\r\n    ]);\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,yDAAyD;AACzD,eAAe,iBAAiB,QAAQ;IACtC,IAAI;QACF,MAAM,gBAAgB,CAAC;QAEvB,8CAA8C;QAC9C,MAAM,mBAAmB,MAAM,MAAM,CAAA,GAAA,+GAAA,CAAA,YAAS,AAAD,EAAE,+GAAA,CAAA,aAAU,CAAC,SAAS,CAAC,QAAQ;QAE5E,IAAI,iBAAiB,EAAE,EAAE;YACvB,MAAM,cAAc,MAAM,iBAAiB,IAAI;YAE/C,kCAAkC;YAClC,SAAS,OAAO,CAAC,CAAA;gBACf,MAAM,gBAAgB,YAAY,MAAM,CAAC,CAAA,UAAW,QAAQ,OAAO,KAAK;gBACxE,MAAM,gBAAgB,cAAc,MAAM;gBAC1C,MAAM,iBAAiB,cAAc,MAAM,CAAC,CAAA,UAAW,QAAQ,QAAQ,KAAK,MAAM,MAAM;gBAExF,aAAa,CAAC,QAAQ,GAAG;oBACvB;oBACA;gBACF;YACF;QACF,OAAO;YACL,wBAAwB;YACxB,SAAS,OAAO,CAAC,CAAA;gBACf,aAAa,CAAC,QAAQ,GAAG;oBACvB,eAAe;oBACf,gBAAgB;gBAClB;YACF;QACF;QAEA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,kCAAkC;QAEhD,2BAA2B;QAC3B,MAAM,gBAAgB,CAAC;QACvB,SAAS,OAAO,CAAC,CAAA;YACf,aAAa,CAAC,QAAQ,GAAG;gBACvB,eAAe;gBACf,gBAAgB;YAClB;QACF;QACA,OAAO;IACT;AACF;AAEO,eAAe;IACpB,IAAI;QACF,yCAAyC;QACzC,MAAM,kBAAkB,MAAM,MAAM,CAAA,GAAA,+GAAA,CAAA,YAAS,AAAD,EAAE,+GAAA,CAAA,aAAU,CAAC,SAAS,CAAC,OAAO;QAE1E,IAAI,CAAC,gBAAgB,EAAE,EAAE;YACvB,MAAM,IAAI,MAAM,CAAC,yBAAyB,EAAE,gBAAgB,MAAM,EAAE;QACtE;QAEA,MAAM,UAAU,MAAM,gBAAgB,IAAI;QAE1C,+CAA+C;QAC/C,MAAM,gBAAgB;YACpB,KAAK;YACL,IAAI;YACJ,KAAK,YAAY,iBAAiB;QACpC;QAEA,0CAA0C;QAC1C,MAAM,WAAW,QAAQ,GAAG,CAAC,CAAA,QAAS,MAAM,OAAO;QACnD,MAAM,gBAAgB,MAAM,iBAAiB;QAE7C,2CAA2C;QAC3C,MAAM,mBAAmB,QACtB,MAAM,CAAC,CAAA,QAAS,MAAM,aAAa,EAAE,2BAA2B;SAChE,GAAG,CAAC,CAAA;YACH,MAAM,aAAa,aAAa,CAAC,MAAM,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,QAAQ,EAAE;YAC9E,MAAM,cAAc,aAAa,CAAC,MAAM,OAAO,CAAC,IAAI;gBAAE,eAAe;gBAAG,gBAAgB;YAAE;YAE1F,OAAO;gBACL,QAAQ;gBACR,OAAO,MAAM,SAAS;gBACtB,MAAM,GAAG,WAAW,WAAW,GAAG,OAAO,CAAC,QAAQ,KAAK,CAAC,EAAE,MAAM,SAAS,CAAC,WAAW,GAAG,OAAO,CAAC,QAAQ,MAAM;gBAC9G,MAAM,MAAM,SAAS,IAAI;gBACzB,eAAe,YAAY,aAAa;gBACxC,gBAAgB,YAAY,cAAc;gBAC1C,UAAU,MAAM,QAAQ;gBACxB,SAAS,MAAM,OAAO;gBACtB,kBAAkB,MAAM,gBAAgB;gBACxC,YAAY,MAAM,UAAU;YAC9B;QACF,GACC,IAAI,CAAC,CAAC,GAAG,IAAM,IAAI,KAAK,EAAE,gBAAgB,IAAI,IAAI,KAAK,EAAE,gBAAgB,IAAI,4BAA4B;QAE5G,OAAO,SAAS,IAAI,CAAC;IAEvB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,kCAAkC;QAEhD,sDAAsD;QACtD,OAAO,SAAS,IAAI,CAAC;YACnB;gBACE,QAAQ;gBACR,OAAO;gBACP,MAAM;gBACN,MAAM;gBACN,eAAe;gBACf,gBAAgB;YAClB;YACA;gBACE,QAAQ;gBACR,OAAO;gBACP,MAAM;gBACN,MAAM;gBACN,eAAe;gBACf,gBAAgB;YAClB;YACA;gBACE,QAAQ;gBACR,OAAO;gBACP,MAAM;gBACN,MAAM;gBACN,eAAe;gBACf,gBAAgB;YAClB;SACD;IACH;AACF","debugId":null}}]
}