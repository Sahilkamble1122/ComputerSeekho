{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 82, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/sahil/OneDrive/Pictures/Documents/GitHub/ComputerSeekho_Frontend/Frontend/Next.Js_repo/computer_sekho/app/api/images/route.js"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport { writeFile, mkdir } from 'fs/promises';\r\nimport { join } from 'path';\r\n\r\nexport async function POST(request) {\r\n  try {\r\n    const formData = await request.formData();\r\n    const albumId = formData.get('albumId');\r\n    const files = formData.getAll('images');\r\n    const coverImageIndex = parseInt(formData.get('coverImageIndex') || '0');\r\n\r\n    if (!albumId || !files || files.length === 0) {\r\n      return NextResponse.json(\r\n        { error: 'Album ID and images are required' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const uploadedImages = [];\r\n    const imagesDir = join(process.cwd(), 'public', 'images');\r\n\r\n    // Create images directory if it doesn't exist\r\n    try {\r\n      await mkdir(imagesDir, { recursive: true });\r\n    } catch (error) {\r\n      console.error('Error creating images directory:', error);\r\n    }\r\n\r\n    for (let i = 0; i < files.length; i++) {\r\n      const file = files[i];\r\n      \r\n      if (!file || !(file instanceof File)) {\r\n        continue;\r\n      }\r\n\r\n      // Generate unique filename\r\n      const timestamp = Date.now();\r\n      const randomString = Math.random().toString(36).substring(2, 15);\r\n      const fileExtension = file.name.split('.').pop();\r\n      const fileName = `${timestamp}_${randomString}.${fileExtension}`;\r\n      \r\n      // Save file to public/images folder\r\n      const bytes = await file.arrayBuffer();\r\n      const buffer = Buffer.from(bytes);\r\n      const filePath = join(imagesDir, fileName);\r\n      \r\n      try {\r\n        await writeFile(filePath, buffer);\r\n        \r\n        // Prepare image data for database\r\n        const imageData = {\r\n          imagePath: `images/${fileName}`,\r\n          albumId: parseInt(albumId),\r\n          isAlbumCover: i === coverImageIndex,\r\n          imageIsActive: true\r\n        };\r\n\r\n        // Save to database via your Spring Boot API\r\n        const token = request.headers.get('authorization');\r\n        const dbResponse = await fetch('http://localhost:8080/api/images', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': token || ''\r\n          },\r\n          body: JSON.stringify(imageData)\r\n        });\r\n\r\n        if (dbResponse.ok) {\r\n          const savedImage = await dbResponse.json();\r\n          uploadedImages.push(savedImage);\r\n        } else {\r\n          console.error(`Failed to save image ${fileName} to database`);\r\n        }\r\n      } catch (error) {\r\n        console.error(`Error saving file ${fileName}:`, error);\r\n      }\r\n    }\r\n\r\n    if (uploadedImages.length === 0) {\r\n      return NextResponse.json(\r\n        { error: 'Failed to upload any images' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    return NextResponse.json({\r\n      message: `Successfully uploaded ${uploadedImages.length} images`,\r\n      images: uploadedImages\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error in image upload:', error);\r\n    return NextResponse.json(\r\n      { error: 'Internal server error' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function GET(request) {\r\n  try {\r\n    const { searchParams } = new URL(request.url);\r\n    const albumId = searchParams.get('albumId');\r\n\r\n    if (!albumId) {\r\n      return NextResponse.json(\r\n        { error: 'Album ID is required' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Fetch images from your Spring Boot API\r\n    const token = request.headers.get('authorization');\r\n    \r\n    try {\r\n      // Get all images from Spring Boot backend and filter by album ID\r\n      const response = await fetch(`http://localhost:8080/api/images`, {\r\n        headers: {\r\n          'Authorization': token || ''\r\n        }\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Backend error: ${response.status}`);\r\n      }\r\n\r\n      const allImages = await response.json();\r\n      \r\n      // Filter images by album ID\r\n      const filteredImages = allImages.filter(img => img.albumId === parseInt(albumId));\r\n      \r\n      return NextResponse.json(filteredImages);\r\n      \r\n    } catch (fetchError) {\r\n      console.error('Error connecting to Spring Boot backend:', fetchError.message);\r\n      return NextResponse.json(\r\n        { error: 'Failed to fetch images from backend' },\r\n        { status: 503 }\r\n      );\r\n    }\r\n\r\n  } catch (error) {\r\n    console.error('Error in GET /api/images:', error);\r\n    return NextResponse.json(\r\n      { \r\n        error: 'Internal server error',\r\n        details: error.message\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}