{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 66, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/sahil/OneDrive/Pictures/Documents/GitHub/ComputerSeekho_Frontend/Frontend/Next.Js_repo/computer_sekho/app/api/images/%5BimageId%5D/cover/route.js"],"sourcesContent":["import { NextResponse } from 'next/server';\r\n\r\nexport async function PUT(request, { params }) {\r\n  try {\r\n    const { imageId } = params;\r\n\r\n    if (!imageId) {\r\n      return NextResponse.json(\r\n        { error: 'Image ID is required' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // First, get the current image to know which album it belongs to\r\n    const token = request.headers.get('authorization');\r\n    const getResponse = await fetch(`http://localhost:8080/api/images/${imageId}`, {\r\n      headers: {\r\n        'Authorization': token || ''\r\n      }\r\n    });\r\n\r\n    if (!getResponse.ok) {\r\n      return NextResponse.json(\r\n        { error: 'Image not found' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    const currentImage = await getResponse.json();\r\n    const albumId = currentImage.albumId;\r\n\r\n    // Get all images in the album to reset their cover status\r\n    const albumImagesResponse = await fetch(`http://localhost:8080/api/images/search/album/${albumId}`, {\r\n      headers: {\r\n        'Authorization': token || ''\r\n      }\r\n    });\r\n\r\n    if (albumImagesResponse.ok) {\r\n      const albumImages = await albumImagesResponse.json();\r\n      \r\n      // Reset all images in the album to not be cover\r\n      for (const image of albumImages) {\r\n        if (image.imageId !== parseInt(imageId)) {\r\n          await fetch(`http://localhost:8080/api/images/${image.imageId}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'Authorization': token || ''\r\n            },\r\n            body: JSON.stringify({ isAlbumCover: false })\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    // Set the selected image as cover\r\n    const updateResponse = await fetch(`http://localhost:8080/api/images/${imageId}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': token || ''\r\n      },\r\n      body: JSON.stringify({ isAlbumCover: true })\r\n    });\r\n\r\n    if (!updateResponse.ok) {\r\n      return NextResponse.json(\r\n        { error: 'Failed to set image as cover' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    const updatedImage = await updateResponse.json();\r\n    return NextResponse.json(updatedImage);\r\n\r\n  } catch (error) {\r\n    console.error('Error setting cover image:', error);\r\n    return NextResponse.json(\r\n      { error: 'Internal server error' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;;AAEO,eAAe,IAAI,OAAO,EAAE,EAAE,MAAM,EAAE;IAC3C,IAAI;QACF,MAAM,EAAE,OAAO,EAAE,GAAG;QAEpB,IAAI,CAAC,SAAS;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAuB,GAChC;gBAAE,QAAQ;YAAI;QAElB;QAEA,iEAAiE;QACjE,MAAM,QAAQ,QAAQ,OAAO,CAAC,GAAG,CAAC;QAClC,MAAM,cAAc,MAAM,MAAM,CAAC,iCAAiC,EAAE,SAAS,EAAE;YAC7E,SAAS;gBACP,iBAAiB,SAAS;YAC5B;QACF;QAEA,IAAI,CAAC,YAAY,EAAE,EAAE;YACnB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAkB,GAC3B;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,eAAe,MAAM,YAAY,IAAI;QAC3C,MAAM,UAAU,aAAa,OAAO;QAEpC,0DAA0D;QAC1D,MAAM,sBAAsB,MAAM,MAAM,CAAC,8CAA8C,EAAE,SAAS,EAAE;YAClG,SAAS;gBACP,iBAAiB,SAAS;YAC5B;QACF;QAEA,IAAI,oBAAoB,EAAE,EAAE;YAC1B,MAAM,cAAc,MAAM,oBAAoB,IAAI;YAElD,gDAAgD;YAChD,KAAK,MAAM,SAAS,YAAa;gBAC/B,IAAI,MAAM,OAAO,KAAK,SAAS,UAAU;oBACvC,MAAM,MAAM,CAAC,iCAAiC,EAAE,MAAM,OAAO,EAAE,EAAE;wBAC/D,QAAQ;wBACR,SAAS;4BACP,gBAAgB;4BAChB,iBAAiB,SAAS;wBAC5B;wBACA,MAAM,KAAK,SAAS,CAAC;4BAAE,cAAc;wBAAM;oBAC7C;gBACF;YACF;QACF;QAEA,kCAAkC;QAClC,MAAM,iBAAiB,MAAM,MAAM,CAAC,iCAAiC,EAAE,SAAS,EAAE;YAChF,QAAQ;YACR,SAAS;gBACP,gBAAgB;gBAChB,iBAAiB,SAAS;YAC5B;YACA,MAAM,KAAK,SAAS,CAAC;gBAAE,cAAc;YAAK;QAC5C;QAEA,IAAI,CAAC,eAAe,EAAE,EAAE;YACtB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA+B,GACxC;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,eAAe,MAAM,eAAe,IAAI;QAC9C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAE3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}